@using Blazor.Shared.Model

@inject IMessagesClientServices _service;
@inject IJSRuntime _js;

<AddButton OpenModal="OpenModal" />
<br />
<br />

<TableItems Messages="messages" DeleteMessage="DeleteMessage" OpenModal="OpenModal"/>
<Modal 
    btnRecord="btnRecord" 
    CloseModal="CloseModal" 
    CreateOrUpdateMessage="CreateOrUpdateMessage"  
    Del="Del"
    errorMessedge="errorMessedge"
    formTitle="formTitle"
    Message="message" 
    notRecording="notRecording"
    Record="Record"
    recordButton="recordButton"
    recording="recording"
    safeFile="safeFile"
    Stop="Stop"
/>




@code {
    private List<Messages>? messages { get; set; }
    private Messages message = new Messages();
    string formTitle = "";
    string errorMessedge = "";
    public int safeFile = 0;

    [Inject]
    public IMessagesClientServices? MessagesClientServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(3000);
        messages = (await _service.GetAllMessagesAsync()).ToList();
    }

    private async Task OpenModal(int postId, string operationType)
    {
        if (operationType.ToLower() == "add")
        {
            formTitle = "Добавление";
            message = new Messages();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
            await _js.InvokeVoidAsync("SoundJSMethods.openModalAdd");
        }
        else
        {
            formTitle = "Редактирование";
            if (postId != 0)
            {
                message = messages.FirstOrDefault(i => i.MessagesId == postId);
            }
            if (message.BinaryData == null)
            {
                await _js.InvokeVoidAsync("SoundJSMethods.openModalEdit");
            }
            else
            {
                await _js.InvokeVoidAsync("SoundJSMethods.openModalEditAudio");

            }

        }
        await _js.InvokeVoidAsync("global.openModal", "myModal");
    }

    private async Task OpenModal(AddButtonModel model)
    {
        if (model.OperationType.ToLower() == "add")
        {
            formTitle = "Добавление";
            message = new Messages();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
            await _js.InvokeVoidAsync("SoundJSMethods.openModalAdd");
        }
        else
        {
            formTitle = "Редактирование";
            if (model.PostId != 0)
            {
                message = messages.FirstOrDefault(i => i.MessagesId == model.PostId);
            }
            if (message.BinaryData == null)
            {
                await _js.InvokeVoidAsync("SoundJSMethods.openModalEdit");
            }
            else
            {
                await _js.InvokeVoidAsync("SoundJSMethods.openModalEditAudio");

            }

        }
        await _js.InvokeVoidAsync("global.openModal", "myModal");
    }

    

    private async Task CloseModal(int messagesId)
    {
        safeFile = 0;
        errorMessedge = "";
        if (messagesId != 0)
        {
            var tempMessag = messages.FirstOrDefault(i => i.MessagesId == messagesId);
            if (tempMessag != null)
            {
                messages = messages.Where(i => i.MessagesId != tempMessag.MessagesId).ToList();
                messages.Insert(0, tempMessag);
            }

            //await _js.InvokeVoidAsync("SoundJSMethods.close");
        }
        await _js.InvokeVoidAsync("SoundJSMethods.close");
        await _js.InvokeVoidAsync("global.closeModal", "myModal");
    }

    private async Task CreateOrUpdateMessage()
    {
        if (message.Name == null || message.Name == "")
        {
            errorMessedge = "'Название сообщения' - обязательно к заполению!";
        }
        else
        {
            if (message.MessagesId == 0)
            {
                var newRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
                if (newRecord.BinaryData.Length == 0)
                {
                    newRecord.BinaryData = null;
                }
                messages.Insert(0, newRecord);
                await CloseModal(message.MessagesId);
            }
            else
            {
                var updatedRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
                messages = messages.Where(i => i.MessagesId != updatedRecord.MessagesId).ToList();
                messages.Insert(0, updatedRecord);
                await CloseModal(message.MessagesId);
            }
            safeFile = 0;
            errorMessedge = "";
            await _js.InvokeVoidAsync("SoundJSMethods.saveMessege");
        }

    }


    string recordButton = "record";
    string btnRecord = "btn-warning";
    bool recording = false;
    bool notRecording = true;


    private async Task Record()
    {

        recordButton = "recording";
        btnRecord = "btn-danger";
        recording = true;
        notRecording = false;

        await _js.InvokeVoidAsync("SoundJSMethods.startRecording");
    }

    private async Task Stop()
    {
        recordButton = "record";
        btnRecord = "btn-warning";
        recording = false;
        notRecording = true;
        safeFile = 1;
        await _js.InvokeVoidAsync("SoundJSMethods.stopRecording");
    }


    private async Task DeleteMessage(int id)
    {
        var delModel = await _service.DeleteMessageAsync(id);

        messages = messages.Where(i => i.MessagesId != delModel.MessagesId).ToList();
    }

    private async Task Del(int id)
    {
        safeFile = 0;

        var delModel = await _service.DeleteAudioFileAsync(id);
        if (delModel.MessagesId != 0)
        {
            var message = messages.FirstOrDefault(i => i.MessagesId == delModel.MessagesId);
            message.BinaryData = null;
        }

        await _js.InvokeVoidAsync("SoundJSMethods.delRecording");
    }
}