@page "/"

@*@inject JsonPlaceHolderClient _jsonPlaceHolderClient;*@
@inject IMessagesClientServices _service;
@inject IJSRuntime _js;

<PageTitle>Index</PageTitle>


<h1>@safeFile</h1>


<button class="btn btn-primary" @onclick='@(e => OpenModal(0,"add"))'>Добавить сообщение</button>
<br/><br/>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название сообщения</th>
            <th scope="col">Сообщение</th>
            <th scope="col">Операции</th>
        </tr>
    </thead>
    <tbody>
        @if (messages != null)
        {
            @foreach (var message in messages.OrderBy(i=>i.MessagesId))
            {
                <tr>
                    <td>@message.MessagesId</td>
                    <td>@message.Name</td>
                    <td>
                        @if (message.BinaryData != null)
                        {
                          <article class="clip">
                            <audio controls="" src="data:audio/ogg; codecs=opu;base64,@System.Convert.ToBase64String(message.BinaryData)"></audio>
                          </article>
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-secondary"
                        @onclick='@(e => OpenModal(message.MessagesId,"update"))'>Редактировать</button>
                        |
                        <button type="button" class="btn btn-danger"
                        @onclick='@(e => DeleteMessage(message.MessagesId))'>Удалить</button>    
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="modal" tabindex="-1" role="dialog" id="myModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@formTitle</h5>
                <button type="button" disabled="@recording" class="btn-close" @onclick="(e => CloseModal())" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtTitle">Название сообщения</label>
                    <input type="text" class="form-control" @bind="message.Name">
                </div>
                <div class="form-group">
                    <input type="hidden" class="form-control" id="safeFile" @bind="safeFile" >
                </div>

                
                    <div class="form-group">
                    <br/><br/>
                        <center>
                        <div id="sound-clip">
                            @if (message.BinaryData != null)
                            {
                                <article class="clip" id="plaer">
                                    <audio controls="" src="data:audio/ogg; codecs=opu;base64,@System.Convert.ToBase64String(message.BinaryData)"></audio>
                                </article>
                                <button type="button" id="delRecord" style="display: block;" class="align-content-center btn btn-danger" @onclick="(e => Del(message.MessagesId))">Удалить запись</button>
                            }
                        </div>
                        <section class="main-controls">
                            @if (message.BinaryData == null)
                            {
                                <div id="buttons">
                                    <button type="button" class="btn @btnRecord @recordButton" disabled="@recording" @onclick=Record>Записать</button>
                                    <button type="button" class="btn btn-success stop bouton" disabled="@notRecording" @onclick=Stop>Остановить</button>
                                </div>
                            }
                                <button type="button" id="delRecord" style="display: none;" class="align-content-center btn btn-danger" @onclick="(e => Del(message.MessagesId))">Удалить запись</button>
                        </section>
                        </center>
                     </div>
            </div>
            <div class="modal-footer">
                <button type="button" disabled="@recording" class="btn btn-primary" @onclick="(e => CreateOrUpdateMessage())">Сохранить</button>
                <button type="button" disabled="@recording" class="btn btn-secondary" @onclick="(e => CloseModal())">Закрыть</button>
            </div>
        </div>
    </div>
</div>



@code{
    private List<Messages>? messages { get; set; }
    private Messages message = new Messages();
    string formTitle = "";
    public int safeFile=0;

    [Inject]
    public IMessagesClientServices? MessagesClientServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        messages = (await _service.GetAllMessagesAsync()).ToList();
    }

    private async Task OpenModal(int postId, string operationType)
    {
        if (operationType.ToLower() == "add")
        {
            formTitle = "Добавление";
            message = new Messages();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
        }
        else
        {
            formTitle = "Редактирование";
            message = messages.Where(i => i.MessagesId == postId).FirstOrDefault();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
        }
    }

    private async Task CloseModal()
    {
        await _js.InvokeVoidAsync("global.closeModal", "myModal");
        await _js.InvokeVoidAsync("SoundJSMethods.close");
    }

    private async Task CreateOrUpdateMessage()
    {
        if (message.MessagesId == 0)
        {
            var newRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
            messages.Insert(0, newRecord);
            await CloseModal();
        }
        else
        {
            var updatedRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
            messages = messages.Where(i => i.MessagesId != updatedRecord.MessagesId).ToList();
            messages.Insert(0, updatedRecord);
            await CloseModal();
        }
        await  _js.InvokeVoidAsync("SoundJSMethods.saveMessege");
    }

    private async Task DeleteMessage(int id)
    {
        var delModel = await _service.DeleteMessageAsync(id);
        messages = messages.Where(i => i.MessagesId != delModel.MessagesId).ToList();
    }

    string recordButton = "record";
    string btnRecord = "btn-warning";
    bool recording = false;
    bool notRecording = true;


    private async Task Record()
    {

        recordButton = "recording";
        btnRecord = "btn-danger";
        recording = true;
        notRecording = false;

        await  _js.InvokeVoidAsync("SoundJSMethods.startRecording");
    }

    private async Task Stop()
    {
        recordButton = "record";
        btnRecord = "btn-warning";
        recording = false;
        notRecording = true;
        safeFile = 1;
        await  _js.InvokeVoidAsync("SoundJSMethods.stopRecording");
    }    
    
    
    private async Task Del(int id)
    {
        safeFile = 0;
        await _service.DeleteAudioFileAsync(id);
        await  _js.InvokeVoidAsync("SoundJSMethods.delRecording");
    }
}