@page "/"

@*@inject JsonPlaceHolderClient _jsonPlaceHolderClient;*@
@inject IMessagesClientServices _service;
@inject IJSRuntime _js;

<PageTitle>Index</PageTitle>


<h1>@safeFile</h1>


<button class="btn btn-primary" @onclick='@(e => OpenModal(0,"add"))'>Добавить сообщение</button>
<br />
<br />

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название сообщения</th>
            <th scope="col">Сообщение</th>
            <th scope="col">Операции</th>
        </tr>
    </thead>
    <tbody>
        @if (messages != null)
        {
            @if (messages.Count == 0)
            {
                <tr><td colspan="4">none items</td></tr>

            }
            else
            {
                @foreach (var message in messages.OrderBy(i => i.MessagesId))
                {
                    @if (message.BinaryData != null && message.BinaryData.Length == 0)
                    {
                        message.BinaryData = null;
                    }
                    <tr>
                        <td>@message.MessagesId</td>
                        <td>@message.Name</td>
                        <td>
                            @if (message.BinaryData != null)
                            {
                                <article class="clip">
                                    <audio controls="" src="data:audio/ogg; codecs=opu;base64,@System.Convert.ToBase64String(message.BinaryData)"></audio>
                                </article>
                            }
                        </td>
                        <td>
                            <button type="button" class="btn btn-secondary"
                        @onclick='@(e => OpenModal(message.MessagesId,"update"))'>
                                Редактировать
                            </button>
                            |
                            <button type="button" class="btn btn-danger"
                        @onclick='@(e => DeleteMessage(message.MessagesId))'>
                                Удалить
                            </button>
                        </td>
                    </tr>
                }
            }

        }
        else
        {

            <center><img src="/css/loading.gif" height="250"></center>
        }
    </tbody>
</table>

<div class="modal" tabindex="-1" role="dialog" id="myModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@formTitle</h5>
                <button type="button" disabled="@recording" class="btn-close" @onclick="(e => CloseModal(message.MessagesId))" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtTitle">Название сообщения</label>
                    <input type="text" class="form-control" @bind="message.Name">
                    <span class="alert-danger">@errorMessedge</span>
                </div>
                <div class="form-group">
                    <input type="hidden" class="form-control" id="safeFile" @bind="safeFile">
                </div>

                <div class="form-group">
                    <br /><br />
                    @if (message.MessagesId != 0 && message.BinaryData != null)
                    {
                        <center>
                            <div id="sound-clip">
                                <article class="clip plaer" style="display:block;" id="plaer">
                                    <audio controls="" src="data:audio/ogg; codecs=opu;base64,@System.Convert.ToBase64String(message.BinaryData)"></audio>
                                </article>                              
                            </div>
                            <section class="main-controls">
                                <div id="buttons" style="display:none;">
                                    <button type="button" class="btn @btnRecord @recordButton" disabled="@recording" @onclick=Record>Записать</button>
                                    <button type="button" class="btn btn-success stop bouton" disabled="@notRecording" @onclick=Stop>Остановить</button>
                                </div>
                                <button type="button" id="delRecord" style="display: block;" class="align-content-center btn btn-danger" @onclick="(e => Del(message.MessagesId))">Удалить запись</button>
                            </section>
                        </center>
                    }
                    else
                    {
                        <center>
                            <div id="sound-clip">
                            </div>
                            <section class="main-controls">
                                <div id="buttons">
                                    <button type="button" class="btn @btnRecord @recordButton" disabled="@recording" @onclick=Record>Записать</button>
                                    <button type="button" class="btn btn-success stop bouton" disabled="@notRecording" @onclick=Stop>Остановить</button>
                                </div>
                                <button type="button" id="delRecord" style="display:none;" class="btn btn-danger" @onclick="(e => Del(message.MessagesId))">Удалить запись</button>
                            </section>
                        </center>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" disabled="@recording" class="btn btn-primary" @onclick="(e => CreateOrUpdateMessage())">Сохранить</button>
                <button type="button" disabled="@recording" class="btn btn-secondary" @onclick="(e => CloseModal(message.MessagesId))">Закрыть</button>
            </div>
        </div>
    </div>
</div>



@code {
    private List<Messages>? messages { get; set; }
    private Messages message = new Messages();
    string formTitle = "";
    string errorMessedge = "";
    public int safeFile = 0;

    [Inject]
    public IMessagesClientServices? MessagesClientServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(3000);
        messages = (await _service.GetAllMessagesAsync()).ToList();
    }

    private async Task OpenModal(int postId, string operationType)
    {
        if (operationType.ToLower() == "add")
        {
            formTitle = "Добавление";
            message = new Messages();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
            await _js.InvokeVoidAsync("SoundJSMethods.openModalAdd");
        }
        else
        {
            formTitle = "Редактирование";
            message = messages.Where(i => i.MessagesId == postId).FirstOrDefault();
            
        }
        await _js.InvokeVoidAsync("global.openModal", "myModal");
    }

    private async Task CloseModal(int messagesId)
    {
        safeFile = 0;
        errorMessedge = "";
        if (messagesId == 0)
        {
            await _js.InvokeVoidAsync("SoundJSMethods.close");
        }
        await _js.InvokeVoidAsync("global.closeModal", "myModal");
    }

    private async Task CreateOrUpdateMessage()
    {
        if (message.Name == null || message.Name == "")
        {
            errorMessedge = "'Название сообщения' - обязательно к заполению!";
        }
        else
        {
            if (message.MessagesId == 0)
            {
                var newRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
                if (newRecord.BinaryData.Length == 0)
                {
                    newRecord.BinaryData = null;
                }
                messages.Insert(0, newRecord);
                await CloseModal(message.MessagesId);
            }
            else
            {
                var updatedRecord = await _service.CreateOrUpdateMessageAsync(message, safeFile);
                messages = messages.Where(i => i.MessagesId != updatedRecord.MessagesId).ToList();
                messages.Insert(0, updatedRecord);
                await CloseModal(message.MessagesId);
            }
            safeFile = 0;
            errorMessedge = "";
            await _js.InvokeVoidAsync("SoundJSMethods.saveMessege");
        }

    }


    string recordButton = "record";
    string btnRecord = "btn-warning";
    bool recording = false;
    bool notRecording = true;


    private async Task Record()
    {

        recordButton = "recording";
        btnRecord = "btn-danger";
        recording = true;
        notRecording = false;

        await _js.InvokeVoidAsync("SoundJSMethods.startRecording");
    }

    private async Task Stop()
    {
        recordButton = "record";
        btnRecord = "btn-warning";
        recording = false;
        notRecording = true;
        safeFile = 1;
        await _js.InvokeVoidAsync("SoundJSMethods.stopRecording");
    }


    private async Task DeleteMessage(int id)
    {
        var delModel = await _service.DeleteMessageAsync(id);

        messages = messages.Where(i => i.MessagesId != delModel.MessagesId).ToList();
    }

    private async Task Del(int id)
    {
        safeFile = 0;

        var delModel = await _service.DeleteAudioFileAsync(id);
        if (delModel.MessagesId != 0)
        {
            var message = messages.FirstOrDefault(i => i.MessagesId == delModel.MessagesId);
            message.BinaryData = null;    
        }
        
        await _js.InvokeVoidAsync("SoundJSMethods.delRecording");
    }
}