@page "/"

@*@inject JsonPlaceHolderClient _jsonPlaceHolderClient;*@
@inject IMessagesClientServices _service;
@inject IJSRuntime _js;

<PageTitle>Index</PageTitle>


<center>

      <p><button id="record">Record</button></p>
      <div id="sound-clip"></div>
    </center>


<button class="btn btn-primary" @onclick='@(e => OpenModal(0,"add"))'>Добавить сообщение</button>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название сообщения</th>
            @*<th scope="col">Сообщение</th>*@
            <th scope="col">Операции</th>
        </tr>
    </thead>
    <tbody>
        @if (messages != null)
        {
            @foreach (var message in messages.OrderBy(i=>i.MessagesId))
            {
                <tr>
                    <td>@message.MessagesId</td>
                    <td>@message.Name</td>
                    @*<td>@message.BinaryData</td>*@
                    <td>
                        <button type="button" class="btn btn-primary"
                        @onclick='@(e => OpenModal(message.MessagesId,"update"))'>Редактировать</button>
                        |
                        <button type="button" class="btn btn-primary"
                        @onclick='@(e => DeleteMessage(message.MessagesId))'>Удалить</button>    
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="modal" tabindex="-1" role="dialog" id="myModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@formTitle</h5>
                <button type="button" class="close" @onclick="(e => CloseModal())" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtTitle">Название сообщения</label>
                    <input type="text" class="form-control" id="txtTitle" @bind="message.Name">
                </div>
@*                <div class="form-group">
                    <label for="txtDescription">Description</label>
                    <input type="text" class="form-control" id="txtDescription" @bind="payload.BinaryData">
                </div>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="(e => CreateOrUpdateMessage())">Сохранить</button>
                <button type="button" class="btn btn-secondary" @onclick="(e => CloseModal())">Закрыть</button>
            </div>
        </div>
    </div>
</div>



@code{
    private List<Messages>? messages { get; set; }
    private Messages message = new Messages();
    string formTitle = "";

    [Inject]
    public IMessagesClientServices? MessagesClientServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        messages = (await _service.GetAllMessagesAsync()).ToList();
    }

    private async Task OpenModal(int postId, string operationType)
    {
        if (operationType.ToLower() == "add")
        {
            formTitle = "Добавление";
            message = new Messages();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
        }
        else
        {
            formTitle = "Редактирование";
            message = messages.Where(i => i.MessagesId == postId).FirstOrDefault();
            await _js.InvokeVoidAsync("global.openModal", "myModal");
        }
    }

    private async Task CloseModal()
    {
        await _js.InvokeVoidAsync("global.closeModal", "myModal");
    }

    private async Task CreateOrUpdateMessage()
    {
        if (message.MessagesId == 0)
        {
            var newRecord = await _service.CreateOrUpdateMessageAsync(message);
            messages.Insert(0, newRecord);
            await CloseModal();
        }
        else
        {
            var updatedRecord = await _service.CreateOrUpdateMessageAsync(message);
            messages = messages.Where(i => i.MessagesId != updatedRecord.MessagesId).ToList();
            messages.Insert(0, updatedRecord);
            await CloseModal();
        }
    }

    private async Task DeleteMessage(int id)
    {
        var delModel = await _service.DeleteMessageAsync(id);
        messages = messages.Where(i => i.MessagesId != delModel.MessagesId).ToList();
    }
}